resource matrix_mult()
  # read command line argument
  var n: int; getarg(1,n)
  var p: int; getarg(2,p)

 # declare and initialize shared arrays
  var a[n,n],b[n,n],c[n,n] : real

 # set up message channels
 op a_chan[1:n](ai[n]: real),
    b_chan[1:n](bi[n,n]: real),
    c_chan[1:n](ci[n]: real)

  # declare shows() procedure
  op shows(x[n,n]: real)

  process coordinator

  var a[n,n] := ([n] ([n] 1.0)),
      b[n,n] := ([n] ([n] 1.0)),
      c[n,n] : real

  # input a and b
  write("Input matrix a one row at a time")
  fa i := 1 to n ->
    fa j := 1 to n ->
      read(a[i,j])
    af
  af
  write()
  write("Input matrix b one row at a time")
  fa i := 1 to n ->
    fa j := 1 to n ->
      read(b[i,j])
    af
  af
  
  # output a and b matrix
  shows(a); write(); shows(b); write()

  co (i:= 1 to n)
    send a_chan[i](a[i])
    // (i:=1 to p)
    send b_chan[i](b)
  oc

  fa j:= 1 to n ->
    receive c_chan[j](c[j])
  af

  shows(c)

  end coordinator

  #Workers
  process worker(w := 1 to p)
    var first, last : int
    first := (w-1)*n/p+1
    last := first + n/p - 1

    var a[first:last,n],c[first:last,n],b[n,n]: real
    
    var sum : real

    fa i:= first to last ->
       receive a_chan[i](a[i])
    af
    receive b_chan[w](b)

    fa i := first to last , j := 1 to n ->
     var sum := 0.0
     fa k := 1 to n -> sum +:= a[i,k]*b[k,j] af
     c[i,j] := sum
    af

    fa i := first to last ->
	send c_chan[i](c[i])	
    af
   end


  proc shows(c)
    fa i := 1 to n ->
      fa j := 1 to n -> writes(c[i,j], " ") af
        write()
    af
  end
end

